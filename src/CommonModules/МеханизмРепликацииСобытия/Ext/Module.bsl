
#Область НастройкиПодсистемы

Функция ИмяПодсистемыМеханизмаРепликации()
	
	Возврат "МеханизмРепликации";
	
КонецФункции

Функция ИспользоватьМеханизмРепликации()
	
	Возврат Константы.МеханизмРепликацииИспользовать.Получить();
	
КонецФункции

Функция ЭтоОбъектМеханизмаРепликации(Источник)
	
	ОбъектМетаданных = Источник.Метаданные();
	СоставПодсистемы = Метаданные.Подсистемы.МеханизмРепликации.Состав;
	
	Возврат СоставПодсистемы.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура СправочникОбъект_ПередЗаписью(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередЗаписью(Источник, "Справочник", Неопределено);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СправочникОбъект_ПриЗаписи(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПриЗаписи(Источник);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СправочникОбъект_ПередУдалением(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередУдалением(Источник, "Справочник");
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ДокументОбъект_ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередЗаписью(Источник, "Документ", РежимЗаписи);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ДокументОбъект_ПриЗаписи(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПриЗаписи(Источник);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ДокументОбъект_ПередУдалением(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередУдалением(Источник, "Документ");
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаОбъект_ПередЗаписью(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередЗаписью(Источник, "Задача", Неопределено);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаОбъект_ПриЗаписи(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПриЗаписи(Источник);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗадачаОбъект_ПередУдалением(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередУдалением(Источник, "Задача");
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура БизнесПроцессОбъект_ПередЗаписью(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередЗаписью(Источник, "БизнесПроцесс", Неопределено);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура БизнесПроцессОбъект_ПриЗаписи(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПриЗаписи(Источник);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура БизнесПроцессОбъект_ПередУдалением(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередУдалением(Источник, "БизнесПроцесс");
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ХарактеристикаОбъект_ПередЗаписью(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередЗаписью(Источник, "ПланВидовХарактеристик", Неопределено);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ХарактеристикаОбъект_ПриЗаписи(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПриЗаписи(Источник);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ХарактеристикаОбъект_ПередУдалением(Источник, Отказ) Экспорт
	
	Попытка
		СсылочныйОбъект_ПередУдалением(Источник, "ПланВидовХарактеристик");
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура РегистрСведений_ПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Попытка
		НаборЗаписейРегистра_ПередЗаписью(Источник, "РегистрСведений", Замещение);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура РегистрСведений_ПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Попытка
		НаборЗаписейРегистра_ПриЗаписи(Источник, Замещение);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура РегистрНакопления_ПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Попытка
		НаборЗаписейРегистра_ПередЗаписью(Источник, "РегистрНакопления", Замещение);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура РегистрНакопления_ПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Попытка
		НаборЗаписейРегистра_ПриЗаписи(Источник, Замещение);
	Исключение
		ЗафиксироватьОшибкуМеханизмаРепликации(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияИзмененийДляРепликации

Процедура СсылочныйОбъект_ПередЗаписью(Источник, ТипОбъекта, РежимЗаписиДокумента)
	
	// Программное отключение механизма репликации, например, при загрузке входящих данных
	Если Источник.ДополнительныеСвойства.Свойство("НеИспользоватьМеханизмРепликации") Тогда
		Возврат;
	КонецЕсли;
	
	// Функциональная опция механизма репликации
	Если Не ИспользоватьМеханизмРепликации() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРепликации = СоздатьСтруктуруПараметров();
	ПараметрыРепликации.ТипОбъекта         = ТипОбъекта;
	ПараметрыРепликации.ЭтоСсылочныйОбъект = Истина;
	ПараметрыРепликации.ЭтоНовый           = Источник.ЭтоНовый();
	ПараметрыРепликации.ЭтоУдаление        = Ложь;
	ПараметрыРепликации.РежимЗаписи        = РежимЗаписиДокумента;
	ПараметрыРепликации.РежимЗамещения     = Неопределено;
	
	Отмена = Ложь;
	
	МеханизмРепликацииЭкспорт.ПроверитьМодифицированностьОбъекта(Источник, ПараметрыРепликации, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	// Выполнить репликацию объекта
	Источник.ДополнительныеСвойства.Вставить(ИмяПодсистемыМеханизмаРепликации(), ПараметрыРепликации);
	
КонецПроцедуры

Процедура СсылочныйОбъект_ПриЗаписи(Источник)
	
	ПараметрыРепликации = Неопределено;
	
	Если Не Источник.ДополнительныеСвойства.Свойство(ИмяПодсистемыМеханизмаРепликации(), ПараметрыРепликации) Тогда
		Возврат; // Не выполнять репликацию объекта
	КонецЕсли;
	
	СформироватьИсходящееСообщениеРепликации(Источник, ПараметрыРепликации);
	
КонецПроцедуры

Процедура СсылочныйОбъект_ПередУдалением(Источник, ТипОбъекта)
	
	// Программное отключение механизма репликации, например, при загрузке входящих данных
	Если Источник.ДополнительныеСвойства.Свойство("НеИспользоватьМеханизмРепликации") Тогда
		Возврат;
	КонецЕсли;
	
	// Функциональная опция механизма репликации
	Если Не ИспользоватьМеханизмРепликации() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРепликации = СоздатьСтруктуруПараметров();
	ПараметрыРепликации.ТипОбъекта         = ТипОбъекта;
	ПараметрыРепликации.ЭтоСсылочныйОбъект = Истина;
	ПараметрыРепликации.ЭтоНовый           = Ложь;
	ПараметрыРепликации.ЭтоУдаление        = Истина;
	ПараметрыРепликации.РежимЗаписи        = Неопределено;
	ПараметрыРепликации.РежимЗамещения     = Неопределено;
	
	Источник.ДополнительныеСвойства.Вставить(ИмяПодсистемыМеханизмаРепликации(), ПараметрыРепликации);
	
	СформироватьИсходящееСообщениеРепликации(Источник, ПараметрыРепликации);
	
КонецПроцедуры

Процедура НаборЗаписейРегистра_ПередЗаписью(Источник, ТипОбъекта, Замещение)
	
	// Программное отключение механизма репликации, например, при загрузке входящих данных
	Если Источник.ДополнительныеСвойства.Свойство("НеИспользоватьМеханизмРепликации") Тогда
		Возврат;
	КонецЕсли;
	
	// Защита от случайного включения объектов подсистемы в подписки на события
	Если ЭтоОбъектМеханизмаРепликации(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Функциональная опция механизма репликации
	Если Не ИспользоватьМеханизмРепликации() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРепликации = СоздатьСтруктуруПараметров();
	ПараметрыРепликации.ТипОбъекта         = ТипОбъекта;
	ПараметрыРепликации.ЭтоСсылочныйОбъект = Ложь;
	ПараметрыРепликации.ЭтоНовый           = Неопределено;
	ПараметрыРепликации.ЭтоУдаление        = Неопределено;
	ПараметрыРепликации.РежимЗаписи        = Неопределено;
	ПараметрыРепликации.РежимЗамещения     = Замещение;
	
	Отмена = Ложь;
	
	МеханизмРепликацииЭкспорт.ПроверитьМодифицированностьОбъекта(Источник, ПараметрыРепликации, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	// Выполнить репликацию объекта
	Источник.ДополнительныеСвойства.Вставить(ИмяПодсистемыМеханизмаРепликации(), ПараметрыРепликации);
	
КонецПроцедуры

Процедура НаборЗаписейРегистра_ПриЗаписи(Источник, Замещение)
	
	ПараметрыРепликации = Неопределено;
	
	Если Не Источник.ДополнительныеСвойства.Свойство(ИмяПодсистемыМеханизмаРепликации(), ПараметрыРепликации) Тогда
		Возврат; // Не выполнять репликацию объекта
	КонецЕсли;
	
	СформироватьИсходящееСообщениеРепликации(Источник, ПараметрыРепликации);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗафиксироватьОшибкуМеханизмаРепликации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ИмяПодсистемыМеханизмаРепликации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

Функция СоздатьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТипОбъекта",         "");
	СтруктураПараметров.Вставить("ЭтоСсылочныйОбъект", Ложь);
	СтруктураПараметров.Вставить("ЭтоНовый",           Ложь);
	СтруктураПараметров.Вставить("ЭтоУдаление",        Ложь);
	СтруктураПараметров.Вставить("РежимЗаписи",        Неопределено);
	СтруктураПараметров.Вставить("РежимЗамещения",     Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СоздатьСтруктуруСообщения()
	
	ТекущаяДата   = ТекущаяДатаСеанса();
	МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	СтруктураСообщения = Новый Структура();
	СтруктураСообщения.Вставить("ДатаВремя",     ТекущаяДата);
	СтруктураСообщения.Вставить("МоментВремени", МоментВремени);
	СтруктураСообщения.Вставить("Идентификатор", Идентификатор);
	СтруктураСообщения.Вставить("Заголовки",     Новый Структура());
	СтруктураСообщения.Вставить("Отправитель",   "");
	СтруктураСообщения.Вставить("Получатели",    Новый Массив());
	СтруктураСообщения.Вставить("ТипСообщения",  "");
	СтруктураСообщения.Вставить("ТелоСообщения", Новый Соответствие());
	
	Возврат СтруктураСообщения;
	
КонецФункции

Процедура СформироватьИсходящееСообщениеРепликации(Источник, Параметры)
	
	// Параметры заполняются в подписках на события механизма репликации
	
	Отмена = Ложь; // Флаг прерывания работы конвейера формирования сообщения репликации
	
	Сообщение = СоздатьСтруктуруСообщения(); // Регистр сведений "МеханизмРепликацииИсходящаяОчередь"
	
	МеханизмРепликацииЭкспорт.СформироватьМассивПолучателей(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	МеханизмРепликацииЭкспорт.СформироватьКодОтправителя(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	МеханизмРепликацииЭкспорт.СформироватьЗаголовкиСообщения(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	МеханизмРепликацииЭкспорт.СформироватьИдентификаторСообщения(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	МеханизмРепликацииЭкспорт.СформироватьТипСообщения(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	МеханизмРепликацииЭкспорт.СформироватьТелоСообщения(Источник, Параметры, Сообщение, Отмена);
	
	Если Отмена Тогда Возврат; КонецЕсли;
	
	// Регистрация исходящего сообщения репликации в регистре сведений "МеханизмРепликацииИсходящаяОчередь"
	
	МеханизмРепликацииЭкспорт.ЗаписатьИсходящееСообщениеРепликации(Сообщение);
	
	// ********************************************************************
	// * Отмена регистрации изменений в плане обмена, если это необходимо *
	// ********************************************************************
	//Если Источник.ОбменДанными.Получатели.Содержит(УзелОбменаСсылка) Тогда
	//	Источник.ОбменДанными.Получатели.Удалить(УзелОбменаСсылка);
	//КонецЕсли;
	
КонецПроцедуры
