
#Область ПрограммныйИнтерфейс

Функция ФорматСообщенияПоУмолчанию() Экспорт
	
	ЭтотУзел = ПланыОбмена.МеханизмРепликации.ЭтотУзел();
	
	ФорматНеУказан = Перечисления.МеханизмРепликацииФорматСообщения.ПустаяСсылка();
	
	Если ЭтотУзел.ФорматСообщения = ФорматНеУказан Тогда
		
		Возврат Перечисления.МеханизмРепликацииФорматСообщения.JDTO;
		
	Иначе
		
		Возврат ЭтотУзел.ФорматСообщения;
		
	КонецЕсли;
	
КонецФункции

Функция ToJSON(СтруктураДанных) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ""));
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON();
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция FromJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	СтруктураДанных = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьМассивФорматов(СообщениеРепликации) Экспорт
	
	МассивФорматов = Новый Массив();
	
	ФорматНеУказан = Перечисления.МеханизмРепликацииФорматСообщения.ПустаяСсылка();
	ФорматПоУмолчанию = ФорматСообщенияПоУмолчанию();
	
	Для Каждого Получатель Из СообщениеРепликации.Получатели Цикл
		
		Если Получатель.Формат = ФорматНеУказан Тогда
			Получатель.Формат = ФорматПоУмолчанию;
		КонецЕсли;
		
		Если МассивФорматов.Найти(Получатель.Формат) = Неопределено Тогда
			МассивФорматов.Добавить(Получатель.Формат);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФорматов.Количество() = 0 Тогда
		МассивФорматов.Добавить(ФорматПоУмолчанию);
	КонецЕсли;
	
	Возврат МассивФорматов;
	
КонецФункции

Функция ЗаписатьJDTO1C(Источник) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ""));
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Источник, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗаписатьXDTO1C(Источник) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Источник, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ЗаписатьJDTO(Источник, ПараметрыРепликации) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, ""));
	
	Если ПараметрыРепликации.ЭтоСсылочныйОбъект Тогда
		СериализоватьСсылочныйОбъект(Источник, ПараметрыРепликации, ЗаписьJSON);
	Иначе
		СериализоватьНаборЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON);
	КонецЕсли;
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ПрочитатьJDTO(ТипСообщения, ТелоСообщения) Экспорт
	
	ТипОбъекта = "";
	ИмяОбъекта = "";
	ОпределитьТипИмяОбъектаПоТипуСообщения(ТипСообщения, ТипОбъекта, ИмяОбъекта);
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТелоСообщения);
	
	Данные = ПрочитатьОбъектJDTO(ЧтениеJSON);
	
	Объект = СоздатьОбъект(ТипОбъекта, ИмяОбъекта, Данные);
	
	Если ЭтоСсылочныйТипОбъекта(ТипОбъекта) Тогда
		
		ЗагрузитьДанныеСсылочногоОбъекта(Данные, Объект);
		
	Иначе
		
		ЗагрузитьДанныеНабораЗаписей(Данные, Объект);
		
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

#КонецОбласти

#Область Запись_объекта_в_JDTO

Функция ПолучитьИмяТипаЗначения(Значение)
	
	Если Значение = Неопределено Или Значение = NULL Тогда
		Возврат "undefined";
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Булево") Тогда
		
		Возврат "boolean";
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		
		Возврат "number";
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Возврат "datetime";
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Возврат "string";
		
	ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		
		Возврат "uuid";
		
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		
		Возврат "binary";
		
	ИначеЕсли ТипЗначения = Тип("ВидДвиженияНакопления") Тогда
		
		Возврат "ВидДвиженияНакопления";
		
	Иначе // Ссылка
		
		Возврат Значение.Метаданные().ПолноеИмя();
	
	КонецЕсли;
	
КонецФункции

Процедура СериализоватьЗначениеСвойства(ИмяТипаЗначения, Значение, ЗаписьJSON)
	
	Если Значение = Неопределено Или Значение = NULL Тогда // undefined
		
		ЗаписьJSON.ЗаписатьЗначение(Неопределено);
		
	ИначеЕсли ИмяТипаЗначения = "boolean" Или ИмяТипаЗначения = "number" Или ИмяТипаЗначения = "string" Тогда
		
		ЗаписьJSON.ЗаписатьЗначение(Значение);
		
	ИначеЕсли ИмяТипаЗначения = "datetime" Тогда
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ИмяТипаЗначения);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(Формат(Значение, "ДФ=гггг-ММ-ддTЧЧ:мм:сс"));
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	ИначеЕсли ИмяТипаЗначения = "uuid" Или ИмяТипаЗначения = "binary" Тогда
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ИмяТипаЗначения);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Значение));
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	ИначеЕсли ИмяТипаЗначения = "ВидДвиженияНакопления" Тогда
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ИмяТипаЗначения);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(?(Значение = ВидДвиженияНакопления.Приход, "Приход", "Расход"));
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	Иначе // Ссылка, в том числе перечисление
		
		Если Лев(ИмяТипаЗначения, 12) = "Перечисление" Тогда
			ЗначениеСсылки = XMLСтрока(Значение);
		Иначе
			ЗначениеСсылки = XMLСтрока(Значение.УникальныйИдентификатор());
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("type");
		ЗаписьJSON.ЗаписатьЗначение(ИмяТипаЗначения);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(ЗначениеСсылки);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СериализоватьСвойствоОбъекта(ИмяСвойства, Значение, ЗаписьJSON)
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
	
	ИмяТипаЗначения = ПолучитьИмяТипаЗначения(Значение);
	
	СериализоватьЗначениеСвойства(ИмяТипаЗначения, Значение, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьРеквизитыОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		Значение = Источник[Реквизит.Имя];
		
		СериализоватьСвойствоОбъекта(Реквизит.Имя, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьИзмеренияОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Значение = Источник[Измерение.Имя];
		
		СериализоватьСвойствоОбъекта(Измерение.Имя, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьРесурсыОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		
		Значение = Источник[Ресурс.Имя];
		
		СериализоватьСвойствоОбъекта(Ресурс.Имя, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьРеквизитыАдресацииОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	Для Каждого РеквизитАдресации Из ОбъектМетаданных.РеквизитыАдресации Цикл
		
		Значение = Источник[РеквизитАдресации.Имя];
		
		СериализоватьСвойствоОбъекта(РеквизитАдресации.Имя, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьТабличныеЧастиОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		
		ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТабличнойЧасти);
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		ДанныеТабличнойЧасти = Источник[ИмяТабличнойЧасти];
		
		Для Каждого Запись Из ДанныеТабличнойЧасти Цикл
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			СериализоватьРеквизитыОбъекта(Запись, ТабличнаяЧасть, ЗаписьJSON);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СериализоватьМассивРеквизитовОбъекта(Источник, МетаданныеРеквизитов, ЗаписьJSON)
	
	Для Каждого Реквизит Из МетаданныеРеквизитов Цикл
		
		Свойство = Реквизит.Имя;
		Значение = Источник[Свойство];
		
		СериализоватьСвойствоОбъекта(Свойство, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбщиеРеквизитыОбъекта(ОбъектМетаданных)
	
	МассивОбщихРеквизитов = Новый Массив();
	
	ЭтоРазделитель = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять;
	АвтоДляОбъекта =  Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	ДаИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	ИспользоватьДляАвто = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		
		Если ОбщийРеквизит.РазделениеДанных = ЭтоРазделитель Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаДляОбъекта = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
		
		Если НастройкаДляОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаДляОбъекта.Использование = НеИспользовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если НастройкаДляОбъекта.Использование = ДаИспользовать Тогда
			
			МассивОбщихРеквизитов.Добавить(ОбщийРеквизит);
		
		ИначеЕсли НастройкаДляОбъекта.Использование = АвтоДляОбъекта
			И ОбщийРеквизит.АвтоИспользование = ИспользоватьДляАвто Тогда
			
			МассивОбщихРеквизитов.Добавить(ОбщийРеквизит);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОбщихРеквизитов;
	
КонецФункции

#Область Ссылочные_Объекты

Процедура СериализоватьСсылочныйОбъект(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	Если ПараметрыРепликации.ЭтоУдаление Тогда
		СериализоватьУдалениеСсылочногоОбъекта(Источник, ПараметрыРепликации, ЗаписьJSON);
	Иначе
		СериализоватьИзменениеСсылочногоОбъекта(Источник, ПараметрыРепликации, ЗаписьJSON);
	КонецЕсли;
	
КонецПроцедуры

Процедура СериализоватьУдалениеСсылочногоОбъекта(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	Значение = Источник.Ссылка;
	
	ИмяТипаЗначения = ПолучитьИмяТипаЗначения(Значение);
	
	СериализоватьЗначениеСвойства(ИмяТипаЗначения, Значение, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьИзменениеСсылочногоОбъекта(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	ОбъектМетаданных = Источник.Метаданные();
	МассивОбщихРеквизитов = ПолучитьОбщиеРеквизитыОбъекта(ОбъектМетаданных);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗначениеСсылки = Источник.Ссылка.УникальныйИдентификатор();
	
	СериализоватьСвойствоОбъекта("Ссылка", ЗначениеСсылки, ЗаписьJSON);
	
	// Сериализация специфичных реквизитов объектов
	
	Если ПараметрыРепликации.ТипОбъекта = "Документ" Тогда
		
		СериализоватьДокумент(Источник, ОбъектМетаданных, ЗаписьJSON);
	
	ИначеЕсли ПараметрыРепликации.ТипОбъекта = "Справочник" Тогда
		
		СериализоватьСправочник(Источник, ОбъектМетаданных, ЗаписьJSON);
		
	ИначеЕсли ПараметрыРепликации.ТипОбъекта = "Задача" Тогда
		
		СериализоватьЗадача(Источник, ОбъектМетаданных, ЗаписьJSON);
		
	ИначеЕсли ПараметрыРепликации.ТипОбъекта = "БизнесПроцесс" Тогда
		
		СериализоватьБизнесПроцесс(Источник, ОбъектМетаданных, ЗаписьJSON);
		
	ИначеЕсли ПараметрыРепликации.ТипОбъекта = "ПланВидовХарактеристик" Тогда
		
		СериализоватьПланВидовХарактеристик(Источник, ОбъектМетаданных, ЗаписьJSON);
		
	КонецЕсли;
	
	// Сериализация общих для всех реквизитов объектов
	
	СериализоватьРеквизитыОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON);
	
	СериализоватьМассивРеквизитовОбъекта(Источник, МассивОбщихРеквизитов, ЗаписьJSON);
	
	СериализоватьТабличныеЧастиОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Процедура СериализоватьДокумент(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	СериализоватьСвойствоОбъекта("ПометкаУдаления", Источник.ПометкаУдаления, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("Дата", Источник.Дата, ЗаписьJSON);
	
	Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
		СериализоватьСвойствоОбъекта("Номер", Источник.Номер, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("Проведен", Источник.Проведен, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("ВерсияДанных", Источник.ВерсияДанных, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьСправочник(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	ИерархияГрупп = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	Если ОбъектМетаданных.Иерархический И ОбъектМетаданных.ВидИерархии = ИерархияГрупп Тогда
		СериализоватьСвойствоОбъекта("ЭтоГруппа", Источник.ЭтоГруппа, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("ПометкаУдаления", Источник.ПометкаУдаления, ЗаписьJSON);
	
	Если ОбъектМетаданных.Владельцы.Количество() > 0 Тогда
		СериализоватьСвойствоОбъекта("Владелец", Источник.Владелец, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.Иерархический Тогда
		СериализоватьСвойствоОбъекта("Родитель", Источник.Родитель, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаКода > 0 Тогда
		СериализоватьСвойствоОбъекта("Код", Источник.Код, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
		СериализоватьСвойствоОбъекта("Наименование", Источник.Наименование, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("ВерсияДанных", Источник.ВерсияДанных, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьЗадача(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	СериализоватьСвойствоОбъекта("ПометкаУдаления", Источник.ПометкаУдаления, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("БизнесПроцесс", Источник.БизнесПроцесс, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("Дата", Источник.Дата, ЗаписьJSON);
	
	Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
		СериализоватьСвойствоОбъекта("Номер", Источник.Номер, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
		СериализоватьСвойствоОбъекта("Наименование", Источник.Наименование, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("Выполнена", Источник.Выполнена, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("ВерсияДанных", Источник.ВерсияДанных, ЗаписьJSON);
	
	СериализоватьРеквизитыАдресацииОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьБизнесПроцесс(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	СериализоватьСвойствоОбъекта("ПометкаУдаления", Источник.ПометкаУдаления, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("Дата", Источник.Дата, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("Завершён", Источник.Выполнена, ЗаписьJSON);
	
	Если ОбъектМетаданных.ДлинаНомера > 0 Тогда
		СериализоватьСвойствоОбъекта("Номер", Источник.Номер, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("ВедущаяЗадача", Источник.ВедущаяЗадача, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("Стартован", Источник.Стартован, ЗаписьJSON);
	
	СериализоватьСвойствоОбъекта("ВерсияДанных", Источник.ВерсияДанных, ЗаписьJSON);
	
	СериализоватьРеквизитыАдресацииОбъекта(Источник, ОбъектМетаданных, ЗаписьJSON);
	
КонецПроцедуры

Процедура СериализоватьПланВидовХарактеристик(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	ИерархияГрупп = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	Если ОбъектМетаданных.Иерархический И ОбъектМетаданных.ВидИерархии = ИерархияГрупп Тогда
		СериализоватьСвойствоОбъекта("ЭтоГруппа", Источник.ЭтоГруппа, ЗаписьJSON);
	КонецЕсли;
	
	СериализоватьСвойствоОбъекта("ПометкаУдаления", Источник.ПометкаУдаления, ЗаписьJSON);
	
	Если ОбъектМетаданных.Иерархический Тогда
		СериализоватьСвойствоОбъекта("Родитель", Источник.Родитель, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаКода > 0 Тогда
		СериализоватьСвойствоОбъекта("Код", Источник.Код, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.ДлинаНаименования > 0 Тогда
		СериализоватьСвойствоОбъекта("Наименование", Источник.Наименование, ЗаписьJSON);
	КонецЕсли;
	
	//СериализоватьСвойствоОбъекта("ТипЗначения", Источник.ТипЗначения, ЗаписьJSON); // ОписаниеТипов
	
	СериализоватьСвойствоОбъекта("ВерсияДанных", Источник.ВерсияДанных, ЗаписьJSON);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы_Записей_Регистров

Процедура СериализоватьНаборЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Если ПараметрыРепликации.РежимЗамещения <> Ложь Тогда // Не Добавление
		// Свойство "delete"
		СериализоватьОтборНабораЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON);
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда
		// Свойство "insert"
		СериализоватьЗаписиНабораЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON);
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта()
	
КонецПроцедуры

Процедура СериализоватьОтборНабораЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	ЗаписьJSON.ЗаписатьИмяСвойства("delete");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
		
		Если ЭлементОтбора.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСвойства = ЭлементОтбора.Имя;
		Значение = ЭлементОтбора.Значение;
		
		СериализоватьСвойствоОбъекта(ИмяСвойства, Значение, ЗаписьJSON);
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

Процедура СериализоватьЗаписиНабораЗаписейРегистра(Источник, ПараметрыРепликации, ЗаписьJSON)
	
	ОбъектМетаданных = Источник.Метаданные();
	МассивОбщихРеквизитов = ПолучитьОбщиеРеквизитыОбъекта(ОбъектМетаданных);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("insert");
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого Запись Из Источник Цикл
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		// Сериализация специфичных реквизитов объектов
		
		Если ПараметрыРепликации.ТипОбъекта = "РегистрСведений" Тогда
			
			СериализоватьРегистрСведений(Запись, ОбъектМетаданных, ЗаписьJSON);
			
		ИначеЕсли ПараметрыРепликации.ТипОбъекта = "РегистрНакопления" Тогда
			
			СериализоватьРегистрНакопления(Запись, ОбъектМетаданных, ЗаписьJSON);
			
		КонецЕсли;
		
		// Сериализация общих для всех реквизитов объектов
		
		СериализоватьИзмеренияОбъекта(Запись, ОбъектМетаданных, ЗаписьJSON);
		
		СериализоватьРесурсыОбъекта(Запись, ОбъектМетаданных, ЗаписьJSON);
		
		СериализоватьРеквизитыОбъекта(Запись, ОбъектМетаданных, ЗаписьJSON);
		
		СериализоватьМассивРеквизитовОбъекта(Запись, МассивОбщихРеквизитов, ЗаписьJSON);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура СериализоватьРегистрСведений(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	ПодчинениеРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	НепериодическийРегистр = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> НепериодическийРегистр Тогда
		СериализоватьСвойствоОбъекта("Период", Источник.Период, ЗаписьJSON);
	КонецЕсли;
	
	Если ОбъектМетаданных.РежимЗаписи = ПодчинениеРегистратору Тогда
		СериализоватьСвойствоОбъекта("Активность", Источник.Активность, ЗаписьJSON);
		СериализоватьСвойствоОбъекта("Регистратор", Источник.Регистратор, ЗаписьJSON);
		//СериализоватьСвойствоОбъекта("НомерСтроки", Источник.НомерСтроки, ЗаписьJSON);
	КонецЕсли;
	
КонецПроцедуры

Процедура СериализоватьРегистрНакопления(Источник, ОбъектМетаданных, ЗаписьJSON)
	
	РегистрОстатков = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	
	СериализоватьСвойствоОбъекта("Период", Источник.Период, ЗаписьJSON);
	СериализоватьСвойствоОбъекта("Активность", Источник.Активность, ЗаписьJSON);
	СериализоватьСвойствоОбъекта("Регистратор", Источник.Регистратор, ЗаписьJSON);
	//СериализоватьСвойствоОбъекта("НомерСтроки", Источник.НомерСтроки, ЗаписьJSON);
	
	Если ОбъектМетаданных.ВидРегистра = РегистрОстатков Тогда
		СериализоватьСвойствоОбъекта("ВидДвижения", Источник.ВидДвижения, ЗаписьJSON);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Чтение_JDTO_в_объект

Функция ПрочитатьОбъектJDTO(ЧтениеJSON)
	
	Объект = Новый Структура();
	
	Свойство = "";
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Токен = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если Токен = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Свойство = ЧтениеJSON.ТекущееЗначение;
			Объект.Вставить(Свойство, Неопределено);
			
		ИначеЕсли Токен = ТипЗначенияJSON.НачалоОбъекта Тогда
			
			Если Не ПустаяСтрока(Свойство) Тогда
				Если Свойство = "delete" Тогда // Свойство набора записей регистра
					Объект[Свойство] = ПрочитатьОбъектJDTO(ЧтениеJSON);
				Иначе
					Объект[Свойство] = ПрочитатьЗначениеJDTO(ЧтениеJSON);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Токен = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат Объект;
			
		ИначеЕсли Токен = ТипЗначенияJSON.НачалоМассива Тогда
			
			Объект[Свойство] = ПрочитатьМассивJDTO(ЧтениеJSON);
			
		ИначеЕсли Токен = ТипЗначенияJSON.КонецМассива Тогда
			
			// Сюда мы попадать не должны
			
		ИначеЕсли Токен = ТипЗначенияJSON.Null Тогда
			
			Объект[Свойство] = ЧтениеJSON.ТекущееЗначение;
			
		ИначеЕсли Токен = ТипЗначенияJSON.Булево Тогда
			
			Объект[Свойство] = ЧтениеJSON.ТекущееЗначение;
			
		ИначеЕсли Токен = ТипЗначенияJSON.Число Тогда
			
			Объект[Свойство] = ЧтениеJSON.ТекущееЗначение;
			
		ИначеЕсли Токен = ТипЗначенияJSON.Строка Тогда
			
			Объект[Свойство] = ЧтениеJSON.ТекущееЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Объект;
	
КонецФункции

Функция ПрочитатьМассивJDTO(ЧтениеJSON)
	
	Массив = Новый Массив();
	
	Пока ЧтениеJSON.Прочитать() Цикл
		
		Токен = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если Токен = ТипЗначенияJSON.НачалоОбъекта Тогда 
			
			Массив.Добавить(ПрочитатьОбъектJDTO(ЧтениеJSON));
			
		ИначеЕсли Токен = ТипЗначенияJSON.КонецМассива Тогда 
			
			Возврат Массив;
			
		КонецЕсли;
	
	КонецЦикла;  
	
	Возврат Массив; // В принципе эта строка не нужна
	
КонецФункции

Функция ПрочитатьЗначениеJDTO(ЧтениеJSON)
	
	Значение = ПрочитатьОбъектJDTO(ЧтениеJSON);
	
	ТипЗначения = Значение.type;
	
	Если ТипЗначения = "uuid" Тогда
		
		Возврат Новый УникальныйИдентификатор(Значение.value);
		
	ИначеЕсли ТипЗначения = "datetime" Тогда
		
		Возврат ПрочитатьДатуJSON(Значение.value, ФорматДатыJSON.ISO);
		
	ИначеЕсли ТипЗначения = "ВидДвиженияНакопления" Тогда
		
		Возврат ВидДвиженияНакопления[Значение.value]; // Приход или Расход
		
	ИначеЕсли ТипЗначения = "binary" Тогда
		
		Возврат XMLЗначение(Тип("ХранилищеЗначения"), Значение.value); // BASE64
		
	КонецЕсли;
	
	ТипОбъекта = "";
	ИмяОбъекта = "";
	ОпределитьТипИмяОбъектаПоТипуСообщения(ТипЗначения, ТипОбъекта, ИмяОбъекта);
	
	Менеджер = ПолучитьМенеджераОбъекта(ТипОбъекта, ИмяОбъекта);
	
	Если ТипОбъекта = "Перечисление" Тогда
		
		Возврат Менеджер[Значение.value];
	
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(Значение.value); // UUID
	
	Ссылка = Менеджер.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции


Функция ЭтоСсылочныйТипОбъекта(ТипОбъекта) Экспорт
	
	Возврат ТипОбъекта = "Документ"
	    Или ТипОбъекта = "Справочник"
		Или ТипОбъекта = "ПланВидовХарактеристик"
		Или ТипОбъекта = "Задача"
		Или ТипОбъекта = "БизнесПроцесс";
	
КонецФункции

Процедура ОпределитьТипИмяОбъектаПоТипуСообщения(ТипСообщения, ТипОбъекта, ИмяОбъекта) Экспорт
	
	Точка = СтрНайти(ТипСообщения, ".");
	ТипОбъекта = Сред(ТипСообщения, 1, Точка - 1);
	ИмяОбъекта = Сред(ТипСообщения, Точка + 1);
	
КонецПроцедуры

Функция СоздатьОбъект(ТипОбъекта, ИмяОбъекта, Данные)
	
	Если ЭтоСсылочныйТипОбъекта(ТипОбъекта) Тогда
		
		Возврат СоздатьСсылочныйОбъект(ТипОбъекта, ИмяОбъекта, Данные);
		
	Иначе
		
		Возврат СоздатьНаборЗаписей(ТипОбъекта, ИмяОбъекта, Данные);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМенеджераОбъекта(ТипОбъекта, ИмяОбъекта)
	
	Если ТипОбъекта = "Документ" Тогда
		
		Возврат Документы[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		
		Возврат Справочники[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "Перечисление" Тогда
		
		Возврат Перечисления[ИмяОбъекта];
	
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда
		
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		Возврат Задачи[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		
		Возврат БизнесПроцессы[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда
		
		Возврат РегистрыСведений[ИмяОбъекта];
		
	ИначеЕсли ТипОбъекта = "РегистрНакопления" Тогда
		
		Возврат РегистрыНакопления[ИмяОбъекта];
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСсылкуНаОбъект(Менеджер, Данные)
	
	Идентификатор = Новый УникальныйИдентификатор(Данные.Ссылка); // Обязательное свойство "Ссылка"
	
	Ссылка = Менеджер.ПолучитьСсылку(Идентификатор);
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьСсылочныйОбъект(ТипОбъекта, ИмяОбъекта, Данные)
	
	Менеджер = ПолучитьМенеджераОбъекта(ТипОбъекта, ИмяОбъекта);
	
	Ссылка = ПолучитьСсылкуНаОбъект(Менеджер, Данные);
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект <> Неопределено Тогда
		Возврат Объект; // Объект уже существует в базе данных
	КонецЕсли;
	
	Если ТипОбъекта = "Документ" Тогда
		
		Объект = Менеджер.СоздатьДокумент();
		
	ИначеЕсли ТипОбъекта = "Справочник" Или ТипОбъекта = "ПланВидовХарактеристик" Тогда
		
		ЭтоГруппа = Ложь; // Необязательное свойство "ЭтоГруппа"
		
		Если Данные.Свойство("ЭтоГруппа", ЭтоГруппа) Тогда
			Если ЭтоГруппа Тогда
				Объект = Менеджер.СоздатьГруппу();
			Иначе
				Объект = Менеджер.СоздатьЭлемент();
			КонецЕсли;
		Иначе
			Объект = Менеджер.СоздатьЭлемент();
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда
		
		Объект = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли ТипОбъекта = "БизнесПроцесс" Тогда
		
		Объект = Менеджер.СоздатьБизнесПроцесс();
		
	КонецЕсли;
	
	Объект.УстановитьСсылкуНового(Ссылка);
	
	Возврат Объект;
	
КонецФункции

Функция СоздатьНаборЗаписей(ТипОбъекта, ИмяОбъекта, Данные)
	
	Менеджер = ПолучитьМенеджераОбъекта(ТипОбъекта, ИмяОбъекта);
	
	Возврат Менеджер.СоздатьНаборЗаписей();
	
КонецФункции



Функция ЭтоСвойствоТолькоДляЧтения(ИмяСвойства)
	
	Возврат ИмяСвойства = "Ссылка"
	    Или ИмяСвойства = "ЭтоГруппа"
	    Или ИмяСвойства = "ВерсияДанных";
	
КонецФункции

Процедура ЗагрузитьДанныеСсылочногоОбъекта(Данные, Объект)
	
	Для Каждого Свойство Из Данные Цикл
		
		ИмяСвойства = Свойство.Ключ;
		
		Если ЭтоСвойствоТолькоДляЧтения(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = Свойство.Значение;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			ЗагрузитьДанныеТабличнойЧасти(Значение, Объект[ИмяСвойства]);
			
		Иначе
			
			Объект[ИмяСвойства] = Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеТабличнойЧасти(МассивДанных, ТабличнаяЧасть)
	
	ТабличнаяЧасть.Очистить();
	
	Для Каждого Данные Из МассивДанных Цикл
		
		Запись = ТабличнаяЧасть.Добавить();
		
		Для Каждого Свойство Из Данные Цикл
			
			Запись[Свойство.Ключ] = Свойство.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеНабораЗаписей(Данные, Набор)
	
	Отбор = Неопределено;
	
	Если Данные.Свойство("delete", Отбор) Тогда
		
		Для Каждого Свойство Из Отбор Цикл
			
			ЭлементОтбора = Набор.Отбор.Найти(Свойство.Ключ);
			
			Если ЭлементОтбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементОтбора.Установить(Свойство.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивДанных = Неопределено;
	
	Если Данные.Свойство("insert", МассивДанных) Тогда
		
		Для Каждого Объект Из МассивДанных Цикл
			
			Запись = Набор.Добавить();
			
			Для Каждого Свойство Из Объект Цикл
				
				Запись[Свойство.Ключ] = Свойство.Значение;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
