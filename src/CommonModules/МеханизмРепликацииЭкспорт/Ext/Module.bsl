
// Структура параметров репликации
// - ТипОбъекта (Строка) Например: "Справочник", "РегистрСведений"
// - ЭтоСсылочныйОбъект (Булево)
// - ЭтоНовый (Булево) Свойство ссылочного объекта
// - ЭтоУдаление (Булево) Обработчик события "ПередУдалением" ссылочного объекта
// - РежимЗаписи (РежимЗаписиДокумента)
// - РежимЗамещения (Булево, РежимЗамещения) Обработчики событий наборов записей регистров

// Структура сообщения репликации
// - ДатаВремя (Дата) Текущая дата формирования сообщения
// - МоментВремени (Число) Текущая универсальная дата в миллисекундах
// - Идентификатор (УникальныйИдентификатор) Ссылка или произвольный идентификатор
// - Заголовки (Структура) Заголовки, метаданные сообщения
// - Отправитель (Строка) Код отправителя
// - ТипСообщения (Строка)
// - ТелоСообщения (Соответствие)
//   - Ключ (ПеречислениеСсылка.МеханизмРепликкацииФорматСообщения)
//   - Значение (Строка) Тело сообщения в соответствующем формате
// - Получатели (Массив структур)
//   - Код (Строка) Код получателя
//   - Ссылка (ПланОбменаСсылка)
//   - Формат (ПеречислениеСсылка.МеханизмРепликкацииФорматСообщения)

// Структура получателя сообщения
// - Код (Строка) Код получателя
// - Ссылка (ПланОбменаСсылка)
// - Формат (ПеречислениеСсылка.МеханизмРепликкацииФорматСообщения)

#Область Подписки_На_События_ПередЗаписью

// Выполняет роль правил выборочной регистрации объектов
Процедура ПроверитьМодифицированностьОбъекта(Источник, ПараметрыРепликации, Отмена) Экспорт
	
	Если ПараметрыРепликации.ЭтоСсылочныйОбъект Тогда
		
		Если ПараметрыРепликации.ЭтоНовый Или ПараметрыРепликации.ЭтоУдаление Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подписки_На_События_ПриЗаписи_И_ПередУдалением

// Выполняет роль механизма регистрации изменений (правил регистрации объектов)
Процедура СформироватьМассивПолучателей(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	СформироватьМассивПолучателейПоУмолчанию(Сообщение.Получатели);
	
	Если Сообщение.Получатели.Количество() = 0 Тогда
		Отмена = Истина; Возврат;
	КонецЕсли;
	
	//****************************************************************
	//* Проверка публикации объекта для репликации через план обмена *
	//****************************************************************
	//ОбъектМетаданных = Источник.Метаданные();
	//Публикация = Метаданные.ПланыОбмена.МеханизмРепликации.Состав;
	//
	//Если Не Публикация.Содержит(ОбъектМетаданных) Тогда
	//	Отмена = Истина; Возврат;
	//КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьМассивПолучателейПоУмолчанию(МассивПолучателей)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ Ссылка, Код, ФорматСообщения
	|     ИЗ ПланОбмена.МеханизмРепликации
	|    ГДЕ НЕ ЭтотУзел
	|      И НЕ ПометкаУдаления
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Получатель = СоздатьСтруктуруПолучателя();
		Получатель.Код = Выборка.Код;
		Получатель.Ссылка = Выборка.Ссылка;
		Получатель.Формат = Выборка.ФорматСообщения;
		
		МассивПолучателей.Добавить(Получатель);
		
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьКодОтправителя(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	Сообщение.Отправитель = СокрЛП(ПланыОбмена.МеханизмРепликации.ЭтотУзел().Код);
	
КонецПроцедуры

Процедура СформироватьЗаголовкиСообщения(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	Сообщение.Заголовки.Вставить("schema", "1.0"); // Версия схемы данных конфигурации
	
	ТипОперации = ОпределитьТипОперацииИзмененияДанных(Источник, ПараметрыРепликации);
	
	Сообщение.Заголовки.Вставить("command", ТипОперации); // Операция DML: INSERT, UPDATE или DELETE
	
КонецПроцедуры

Функция ОпределитьТипОперацииИзмененияДанных(Источник, ПараметрыРепликации)
	
	Если ПараметрыРепликации.ЭтоСсылочныйОбъект Тогда
		
		Если ПараметрыРепликации.ЭтоНовый Тогда
			Возврат "INSERT";
		ИначеЕсли ПараметрыРепликации.ЭтоУдаление Тогда
			Возврат "DELETE";
		Иначе
			Возврат "UPDATE";
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРепликации.РежимЗамещения = Ложь Тогда // Добавление
			
			Возврат "INSERT";
			
		ИначеЕсли ПараметрыРепликации.РежимЗамещения = Истина Тогда // Замещение
			
			Если Источник.Количество() = 0 Тогда
				Возврат "DELETE";
			Иначе
				Возврат "UPDATE";
			КонецЕсли;
			
		Иначе // 8.3.25+ Обновление, Слияние, Удаление
			
			Возврат Строка(ПараметрыРепликации.РежимЗамещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьИдентификаторСообщения(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	Сообщение.Идентификатор = ПолучитьУникальныйИдентификаторОбъекта(Источник, ПараметрыРепликации);
	
КонецПроцедуры

Функция ПолучитьУникальныйИдентификаторОбъекта(Источник, ПараметрыРепликации)
	
	Если ПараметрыРепликации.ТипОбъекта = "РегистрНакопления" Тогда
		
		Возврат ПолучитьУникальныйИдентификаторРегистратора(Источник);
		
	ИначеЕсли ПараметрыРепликации.ТипОбъекта = "РегистрСведений" Тогда
		
		ОбъектМетаданных = Источник.Метаданные();
		
		ПодчинениеРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
		
		Если ОбъектМетаданных.РежимЗаписи = ПодчинениеРегистратору Тогда
			
			Возврат ПолучитьУникальныйИдентификаторРегистратора(Источник);
			
		Иначе
			
			Возврат Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	Иначе // Ссылочные типы объектов
		
		Возврат Источник.Ссылка.УникальныйИдентификатор();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторРегистратора(Источник)
	
	ЭлементОтбора = Источник.Отбор.Найти("Регистратор");
	
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Новый УникальныйИдентификатор();
	Иначе
		Возврат ЭлементОтбора.Значение.УникальныйИдентификатор();
	КонецЕсли;
	
	Если Источник.Количество() = 0 Тогда
		Возврат Новый УникальныйИдентификатор();
	Иначе
		Возврат Источник[0].Регистратор.УникальныйИдентификатор();
	КонецЕсли;
	
КонецФункции

Процедура СформироватьТипСообщения(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	Если ТипЗнч(Источник) = Тип("УдалениеОбъекта") Тогда
		Сообщение.ТипСообщения = "ObjectDeletion";
	ИначеЕсли ПараметрыРепликации.ЭтоСсылочныйОбъект И ПараметрыРепликации.ЭтоУдаление Тогда
		Сообщение.ТипСообщения = "ObjectDeletion";
	Иначе
		Сообщение.ТипСообщения = Источник.Метаданные().ПолноеИмя();
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТелоСообщения(Источник, ПараметрыРепликации, Сообщение, Отмена) Экспорт
	
	МассивФорматов = СериализаторJDTO.ПолучитьМассивФорматов(Сообщение);
	
	Для Каждого Формат Из МассивФорматов Цикл
		
		Если Формат = Перечисления.МеханизмРепликацииФорматСообщения.XDTO1C Тогда
			
			ТелоСообщения = СериализаторJDTO.ЗаписатьXDTO1C(Источник);
			
		ИначеЕсли Формат = Перечисления.МеханизмРепликацииФорматСообщения.JDTO1C Тогда
			
			ТелоСообщения = СериализаторJDTO.ЗаписатьJDTO1C(Источник);
			
		Иначе // Формат сообщения по умолчанию
			
			ТелоСообщения = СериализаторJDTO.ЗаписатьJDTO(Источник, ПараметрыРепликации);
			
		КонецЕсли;
		
		Сообщение.ТелоСообщения[Формат] = ТелоСообщения;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция СоздатьСтруктуруПолучателя()
	
	Получатель = Новый Структура();
	Получатель.Вставить("Код",    "");
	Получатель.Вставить("Ссылка", ПланыОбмена.МеханизмРепликации.ПустаяСсылка());
	Получатель.Вставить("Формат", Перечисления.МеханизмРепликацииФорматСообщения.JDTO);
	
	Возврат Получатель;
	
КонецФункции

Функция ПолучитьМассивПолучателейПоФормату(МассивВсехПолучателей, ФорматСообщения)
	
	ФорматНеУказан = Перечисления.МеханизмРепликацииФорматСообщения.ПустаяСсылка();
	ФорматПоУмолчанию = СериализаторJDTO.ФорматСообщенияПоУмолчанию();
	
	МассивПолучателей = Новый Массив();
	
	Для Каждого Получатель Из МассивВсехПолучателей Цикл
		
		Если Получатель.Формат = ФорматНеУказан Тогда
			Получатель.Формат = ФорматПоУмолчанию;
		КонецЕсли;
		
		Если Получатель.Формат = ФорматСообщения Тогда
			МассивПолучателей.Добавить(Получатель);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

Функция СериализоватьМассивПолучателей(МассивПолучателей)
	
	СписокПолучателей = "";
	
	Для Каждого Получатель Из МассивПолучателей Цикл
		
		КодПолучателя = СокрЛП(Получатель.Код);
		
		Если ПустаяСтрока(КодПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(СписокПолучателей) Тогда
			СписокПолучателей = КодПолучателя; // Первый элемент
		Иначе
			СписокПолучателей = СписокПолучателей + "," + КодПолучателя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПолучателей;
	
КонецФункции

Процедура ЗаписатьИсходящееСообщениеРепликации(Сообщение) Экспорт
	
	МассивФорматов = СериализаторJDTO.ПолучитьМассивФорматов(Сообщение);
	
	КорректироватьЗначениеПервичногоКлюча = (МассивФорматов.Количество() > 1);
	
	Для Каждого Формат Из МассивФорматов Цикл
		
		Если КорректироватьЗначениеПервичногоКлюча Тогда
			Сообщение.МоментВремени = Сообщение.МоментВремени + 1;
		КонецЕсли;
		
		Сообщение.Заголовки.Вставить("format", XMLСтрока(Формат));
		
		ЗаголовкиJSON = СериализаторJDTO.ToJSON(Сообщение.Заголовки);
		
		МассивПолучателей = ПолучитьМассивПолучателейПоФормату(Сообщение.Получатели, Формат);
		
		ПолучателиCSV = СериализоватьМассивПолучателей(МассивПолучателей);
		
		ЗаписатьИсходящееСообщение(ПолучателиCSV, ЗаголовкиJSON, Сообщение, Формат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИсходящееСообщение(ПолучателиCSV, ЗаголовкиJSON, Сообщение, Формат)
	
	Набор = РегистрыСведений.МеханизмРепликацииИсходящаяОчередь.СоздатьНаборЗаписей();
	
	Запись = Набор.Добавить();
	
	// Заполнение измерений
	
	Запись.МоментВремени = Сообщение.МоментВремени;
	Запись.Идентификатор = Сообщение.Идентификатор;
	
	// Заполнение сообщения полезными данными
	
	Запись.ДатаВремя     = Сообщение.ДатаВремя;
	Запись.Отправитель   = Сообщение.Отправитель;
	Запись.Получатели    = ПолучателиCSV;
	Запись.Заголовки     = ЗаголовкиJSON;
	Запись.ТипСообщения  = Сообщение.ТипСообщения;
	Запись.ТелоСообщения = Сообщение.ТелоСообщения[Формат];
	
	// Запись исходящего сообщения репликации в базу данных
	
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.ОбменДанными.Получатели.Очистить();
	Набор.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	Набор.Записать(Ложь); // INSERT РежимЗамещения.Добавление
	
КонецПроцедуры